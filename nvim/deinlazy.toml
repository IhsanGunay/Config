[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
  nnoremap [Window]m 
  \ <Cmd>Denite menu -buffer-name=menu<CR>

  nnoremap [Window]f 
  \ <Cmd>Denite menu:vim -buffer-name=menu<CR>

  nnoremap [Window]l 
  \ <Cmd>Denite buffer<CR>

  nnoremap [Window]d 
  \ <Cmd>Denite file/rec<CR>

  nnoremap H 
  \ <Cmd>Denite help/superior -buffer-name=search<CR>

  cnoremap <silent> <Tab> 
  \ <C-C>:Denite command/complete -buffer-name=complete<CR>

  nnoremap [Space]g <Cmd>Denite grep<CR>

  nnoremap [Space]n
  \ <Cmd>Denite -buffer-name=search -resume -no-start-filter<CR>

  xnoremap <silent> *
  \ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>

  nnoremap <silent><expr> *
  \ wordcount().chars > 30000 ?
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
'''
hook_source = '''
source ~/.config/nvim/settings/denite.vimrc
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-icons', 'defx-git']
hook_add = '''
nnoremap - <Cmd>Defx `escape(expand('%:p:h'), ' :')` -search=`expand('%:p')`<CR>
'''
hook_post_source = '''
  call defx#custom#option('_', {
  \ 'columns': 'indent:git:icons:filename:mark',
  \ 'ignored_files': '.git,*cache*,.pki',
  \ 'vertical_preview': 1,
  \ 'auto_cd': 1,
  \ 'toggle': 1,
  \ 'winwidth': 20,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'root_marker': '',
  \ })
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
depends = 'denite.nvim'
on_source = ['defx.nvim', 'denite.nvim']
hook_add = '''
nnoremap [Window]t <Cmd>Deol zsh -split=vertical -toggle<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*% '
  let g:deol#shell_history_path = '~/.cache/zsh/history'
  let g:deol#extra_options = {'term_kill': 'kill'}
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_post_source = '''
  source ~/.config/nvim/settings/deoplete.vimrc
  call deoplete#enable()
'''
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#use_splits_not_buffers = "right"
'''

[[plugins]]
repo = 'hkupty/iron.nvim'
on_cmd = 'IronRepl'
hook_add = '''
nnoremap [Window]r <Cmd>IronRepl<CR>
'''
hook_source = '''
  lua require('ironrc')

  imap <C-S>  <Cmd>lua require("iron").core.send_line()<CR>
  xmap ;s     <Plug>(iron-visual-send)
  nmap ;s     <Plug>(iron-send-motion)
  nmap ;f     magg<Plug>(iron-send-motion)G`a
  nmap ;l     <Plug>(iron-send-line)
  nmap ;<CR>  <Plug>(iron-cr)
  nmap ;i     <Plug>(iron-interrupt)
  nmap ;c     <Plug>(iron-clear)
  nmap ;q     <Plug>(iron-exit)
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'vue']
hook_source = '''
  nnoremap   [Space]o   <plug>(emmet-expand-abbr)
  nnoremap   <C-o>      <plug>(emmet-expand-abbr)
  inoremap   <C-o>      <plug>(emmet-expand-abbr)
'''

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertCharPre'
depends = ['vim-snippets', 'deoplete.nvim']
hook_add = '''
  let g:UltiSnipsExpandTrigger = '<C-j>'
  let g:UltiSnipsJumpForwardTrigger = '<C-j>'
  let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
'''

[[plugins]]
repo = 'dense-analysis/ale'
on_ft = ['html', 'css', 'javascript', 'python', 'yaml']
hook_source = '''
  let g:airline#extensions#ale#enabled = 1
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_sign_error = '✘'
  let g:ale_sign_warning = '⚠'
  let g:ale_lint_on_text_changed = 'never'
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}
hook_source = '''
let g:eft_ignorecase = v:true
'''
hook_add = '''
  nmap ;; <Plug>(eft-repeat)
  xmap ;; <Plug>(eft-repeat)

  nmap f <Plug>(eft-f)
  xmap f <Plug>(eft-f)
  omap f <Plug>(eft-f)
  nmap F <Plug>(eft-F)
  xmap F <Plug>(eft-F)
  omap F <Plug>(eft-F)

  nmap t <Plug>(eft-t)
  xmap t <Plug>(eft-t)
  omap t <Plug>(eft-t)
  nmap T <Plug>(eft-T)
  xmap T <Plug>(eft-T)
  omap T <Plug>(eft-T)
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
nnoremap <expr> [Space]a <SID>AccelToggle()
  let s:accel = v:false
  function! s:AccelToggle() abort
    if s:accel
      nunmap j
      nunmap k
      let s:accel = v:false
      echo ''
    else
      nmap <silent> j <Plug>(accelerated_jk_gj)
      nmap <silent> k <Plug>(accelerated_jk_gk)
      let s:accel = v:true
      echo 'Accelerated!'
    endif
  endfunction
'''
hook_source = '''
  let g:accelerated_jk_enable_deceleration = 1
  let g:accelerated_jk_acceleration_limit = 800
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}
hook_add = '''
  map <silent> ;a <Plug>(operator-surround-append)
  map <silent> ;d <Plug>(operator-surround-delete)
  map <silent> ;r <Plug>(operator-surround-replace)

  nmap <silent> ;dd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
  nmap <silent> ;rr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

  nmap <silent> ;db <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
  nmap <silent> ;rb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
depends = 'vim-textobj-user'
on_map = {x = '<Plug>', o = '<Plug>'}
hook_add = '''
  xmap ab <Plug>(textobj-anyblock-a)
  omap ab <Plug>(textobj-anyblock-a)

  xmap ib <Plug>(textobj-anyblock-i)
  omap ib <Plug>(textobj-anyblock-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {x = '<Plug>', o = '<Plug>'}
hook_add = '''
  xmap al <Plug>(textobj-line-a)
  omap al <Plug>(textobj-line-a)

  xmap il <Plug>(textobj-line-i)
  omap il <Plug>(textobj-line-i)
'''
[[plugins]]
repo = 'thinca/vim-textobj-between'
depends = 'vim-textobj-user'
on_map = {x = '<Plug>', o = '<Plug>'}
hook_add = '''
  xmap af <Plug>(textobj-between-a)
  omap af <Plug>(textobj-between-a)

  xmap if <Plug>(textobj-between-i)
  omap if <Plug>(textobj-between-i)
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufEnter'
hook_post_update = 'TSUpdate'
hook_source = "lua require('treerc')"

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = 'DeinUpdate'

[[plugins]]
repo = 'pbrisbin/vim-mkdir'
on_event = 'BufNewFile'

[[plugins]]
repo = 'folke/lua-dev.nvim'
on_ft = 'lua'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'Shougo/deoplete-lsp'
depends = 'nvim-lsp'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'neovim/nvim-lsp'
